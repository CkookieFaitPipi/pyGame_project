import os
import random
import sys

import pygame

pygame.init()
pygame.key.set_repeat(200, 70)
size = WIDTH, HEIGHT = 1000, 1000
screen = pygame.display.set_mode(size)
pygame.display.set_caption('CosmoTrip')
clock = pygame.time.Clock()
FPS = 50
all_sprites = pygame.sprite.Group()
meteors_group = pygame.sprite.Group()
player_group = pygame.sprite.Group()
player = None


def load_image(name, colorkey=None):
    fullname = os.path.join('data', name)
    if not os.path.isfile(fullname):
        print(f"Файл с изображением '{fullname}' не найден")
        sys.exit()
    image = pygame.image.load(fullname)
    if colorkey is not None:
        image = image.convert()
        if colorkey == -1:
            colorkey = image.get_at((0, 0))
        image.set_colorkey(colorkey)
    else:
        image = image.convert_alpha()
    return image


player_image = load_image('player.png')


def start_screen():
    intro_text = ["Правила игры:",
                  'Есть 3 уровня']

    fon = pygame.transform.scale(load_image('fon.png'), (WIDTH, HEIGHT))
    screen.blit(fon, (0, 0))
    font = pygame.font.Font(None, 30)
    text_coord = 50
    for line in intro_text:
        string_rendered = font.render(line, 1, pygame.Color('white'))
        intro_rect = string_rendered.get_rect()
        text_coord += 10
        intro_rect.top = text_coord
        intro_rect.x = 10
        text_coord += intro_rect.height
        screen.blit(string_rendered, intro_rect)

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                terminate()
            elif event.type == pygame.KEYDOWN or \
                    event.type == pygame.MOUSEBUTTONDOWN:

                return  # начинаем игру
        pygame.display.flip()
        clock.tick(FPS)


def terminate():
    pygame.quit()
    sys.exit()


class Player(pygame.sprite.Sprite):
    def __init__(self, pos_x, pos_y):
        super().__init__(player_group, all_sprites)
        self.image = player_image
#       self.rect = self.image.get_rect().move()
        self.pos = (pos_x, pos_y)

    def move(self, x, y):
        self.pos = (x, y)
#       self.rect = self.image.get_rect().move()


def load_level(filename):
    filename = "data/" + filename
    # читаем уровень, убирая символы перевода строки
    with open(filename, 'r') as mapFile:
        level_map = [line.strip() for line in mapFile]

    # и подсчитываем максимальную длину
    max_width = max(map(len, level_map))

    # дополняем каждую строку пустыми клетками ('.')
    return list(map(lambda x: x.ljust(max_width, '.'), level_map))


def move(hero, movement):
    x, y = hero.pos
    if movement == 'left':
        if x > 0 and level_map[y][x - 1] != '#':
            hero.move(x - 1, y)
    if movement == 'right':
        if x < level_x - 1 and level_map[y][x + 1] != '#':
            hero.move(x + 1, y)


def generate_level(level):
    new_player, x, y = None, None, None

    x = level_x / 2
    return new_player, x, y


class Border(pygame.sprite.Sprite):
    # строго вертикальный или строго горизонтальный отрезок
    def __init__(self, x1, y1, x2, y2):
        super().__init__(all_sprites)
        if x1 == x2:  # вертикальная стенка
            self.add(vertical_borders)
            self.image = pygame.Surface([1, y2 - y1])
            self.rect = pygame.Rect(x1, y1, 1, y2 - y1)

vertical_borders = pygame.sprite.Group()

start_screen()

running = True

while running:
    clock.tick(100)
    all_sprites.update()
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_LEFT:
                move(player, 'left')
            if event.key == pygame.K_RIGHT:
                move(player, 'right')
    screen.fill(pygame.Color("white"))
    pygame.display.flip()

terminate()
